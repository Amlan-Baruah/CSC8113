apiVersion: k6.io/v1alpha1
kind: TestRun
metadata:
  name: k6-load-test
spec:
  parallelism: 2
  script:
    configMap:
      name: k6-script
      file: "script.js"
  arguments: --out experimental-prometheus-rw
  runner:
    env:
      - name: K6_PROMETHEUS_RW_SERVER_URL
        value: "http://prometheus-operated.monitoring.svc:9090/api/v1/write"
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: k6-script
data:
  script.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';

    export let options = {
        stages: [
            { duration: '5s', target: 100 },  // 5s - ramp up to 100 users
            { duration: '5s', target: 200 },  // 5s - ramp up to 200 users
            { duration: '5s', target: 300 },  // 5s - ramp up to 300 users
            { duration: '5s', target: 400 },  // 5s - ramp up to 400 users
            { duration: '5s', target: 500 },  // 5s - ramp up to 500 users
            { duration: '5m', target: 500 },  // 5m - hold at 500 users
            { duration: '25s', target: 0 },    // 25s - ramp down to 0 users
        ],
        thresholds: {
            // http_req_duration: ['p(95)<500'],
        },
    };

    export default function () {
        let res = http.get('http://catalog-service-green.default.svc/api/books');

        check(res, {
            'status is 200': (r) => r.status === 200,
            // 'response time < 1s': (r) => r.timings.duration < 1000
        });

        sleep(1);
    }